{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/untils/validators/validators.ts","components/dialogs/dialogs.module.css","components/dialogs/dialogs-item/dialogs-item.module.css","components/dialogs/dialogs-item/dialog/dialog.module.css","components/dialogs/messages/messages.module.css","components/dialogs/messages/message/message.module.css","components/dialogs/dialogs-item/dialog/dialog.tsx","components/dialogs/dialogs-item/dialogs-item.tsx","components/dialogs/messages/message/message.tsx","components/dialogs/messages/messages.tsx","components/form/message-form/message-form.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","Input","props","input","restProps","id","InputProps","visible","startAdornment","position","undefined","createField","validators","placeholder","type","name","label","validate","autoComplete","component","required","value","requiredMidle","maxLengthCreator","maxLength","length","minLengthCreator","minLength","module","exports","Dialog","key","style","dialog","to","DialogsItem","dialogsElements","dialogsData","map","dialogs","Message","message","Messages","messagesItem","messagesData","msg","messages","minLength1","MessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Dialogs","addMessageCB","formData","useSelector","state","dialogsPage","dispatch","useDispatch","useCallback","newMessageText","addMessage"],"mappings":"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","file":"static/js/5.15a1364e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ValidatorFieldType } from '../../untils/validators/validators';\r\nimport \"./FormsControls.sass\";\r\nimport { TextField, InputAdornment } from \"@material-ui/core\";\r\nimport { AccountCircle } from \"@material-ui/icons\";\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\n\r\n\r\n\r\nexport const FormControl:React.FC<WrappedFieldProps> = ({ meta, children }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={`form-control ${hasError ? \"error\" : \"\"}`}>\r\n      {children}\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type InputProps = {\r\n  visible: boolean\r\n}\r\n\r\nexport const Input:React.FC<WrappedFieldProps & InputProps>= (props) => {\r\n  const { input, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextField\r\n        className=\"field\"\r\n        id=\"input-with-icon-textfield\"\r\n        {...input}\r\n        {...restProps}\r\n        InputProps={restProps.visible ? {\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\" >\r\n              <AccountCircle />\r\n            </InputAdornment>\r\n          )\r\n        }: undefined}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n\r\nexport function createField<FormKeysType extends string>(\r\n   validators: ValidatorFieldType[], \r\n   className: string, \r\n   placeholder: string | undefined, \r\n   type: string | null, \r\n   name: FormKeysType  , \r\n   label: string | null,\r\n   visible: boolean) {\r\n  return (\r\n    <div>\r\n      <Field\r\n        validate={validators}\r\n        className={className} \r\n        autoComplete=\"off\"\r\n        placeholder={placeholder}\r\n        type={type}\r\n        name={name}\r\n        label={label}\r\n        component={Input}\r\n        visible={visible}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export type ValidatorFieldType = (value: string) => string | undefined\r\n\r\nexport const required: ValidatorFieldType = (value) => {\r\n  if (value) return undefined;\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const requiredMidle: ValidatorFieldType = value => {\r\n  if (!value) return ''\r\n  return undefined\r\n}\r\nexport const maxLengthCreator = (maxLength: number): ValidatorFieldType => {\r\n  return (value) => {\r\n    if (value && value.length > maxLength) return `Max Length ${maxLength} symbols`;\r\n    return undefined;\r\n  };\r\n};\r\n\r\nexport const minLengthCreator = (minLength: number): ValidatorFieldType => {\r\n  return (value) => {\r\n    if (value && value.length < minLength) return `Min Length ${minLength} symbols`;\r\n    return undefined;\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3KrFF\",\"dialogsSend\":\"dialogs_dialogsSend__1-Anr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs-item_dialogs__2rcnM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__Ux0q-\",\"active\":\"dialog_active__3QEoU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"messages_messages__2hRXV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__1R9rs\"};","import React from \"react\";\r\nimport style from \"./dialog.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n  key: number\r\n}\r\n\r\nexport const Dialog:React.FC<PropsType> = ({ id, name, key }) => {\r\n  return (\r\n    <div key={key} className={style.dialog}>\r\n      <NavLink to={`/dialogs/${id}`}>{name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React from \"react\";\r\nimport style from \"./dialogs-item.module.css\";\r\nimport { Dialog } from \"./dialog/dialog\";\r\nimport { dialogsData } from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n  dialogsData: dialogsData[]\r\n}\r\n\r\nexport const DialogsItem: React.FC<PropsType> = ({ dialogsData }) => {\r\n\r\n  let dialogsElements = dialogsData.map((dialog) => {\r\n    return <Dialog name={dialog.name} id={dialog.id} key={dialog.id} />;\r\n  });\r\n\r\n  return <div className={style.dialogs}>{dialogsElements}</div>;\r\n};\r\n\r\n","import React from 'react'\r\nimport style from './message.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n    key: number\r\n}\r\n\r\nexport const Message:React.FC<PropsType> = ({message, key}) => {\r\n\r\n    return (\r\n        <div key={key} className={style.message}>{message}</div>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport style from './messages.module.css'\r\nimport { Message } from './message/message'\r\nimport { MessagesDataType } from '../../../redux/dialogs-reducer'\r\n\r\n\r\ntype PropsType = {\r\n    messagesData: MessagesDataType[]\r\n}\r\n\r\nexport const Messages: React.FC<PropsType> = ({ messagesData }) => {\r\n\r\n    let messagesItem = messagesData.map(msg => {\r\n        return <Message message={msg.message} key={msg.id} />\r\n    })\r\n\r\n    return (\r\n        <div className={style.messages}>\r\n            {messagesItem}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport \"./message-form.sass\";\r\nimport { createField } from \"../../common/FormsControls/FormsControls\";\r\nimport {\r\n  requiredMidle,  \r\n  minLengthCreator,\r\n} from \"../../untils/validators/validators\";\r\nimport { FormMessagesDataType, FormMessagesDataKeysType } from \"../../dialogs/Dialogs\";\r\n\r\nconst minLength1 = minLengthCreator(1);\r\n\r\nconst MessageForm:React.FC<InjectedFormProps<FormMessagesDataType>> = ({handleSubmit}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"message-form\">\r\n      <div className=\"message-form_layout\">\r\n        {createField<FormMessagesDataKeysType>(\r\n          [requiredMidle, minLength1],\r\n          \"message-form_input\",\r\n          \"Input your message\",\r\n          \"text\",\r\n          \"message\",\r\n          null,\r\n          false\r\n        )}\r\n        <button className=\"message-form_button\">Add Message</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const MessageReduxForm = reduxForm<FormMessagesDataType>({\r\n  form: \"message\",\r\n})(MessageForm);\r\n\r\n","import React from \"react\";\r\nimport style from \"./dialogs.module.css\";\r\nimport { DialogsItem } from \"./dialogs-item/dialogs-item\";\r\nimport { Messages } from \"./messages/messages\";\r\nimport { MessageReduxForm } from \"../form/message-form/message-form\";\r\nimport { MessagesDataType, dialogsData } from \"../../redux/dialogs-reducer\"\r\n\r\ntype PropsType = {\r\n  addMessageCB: (messageText: string) => void\r\n  messagesData: MessagesDataType[]\r\n  dialogsData: dialogsData[]\r\n}\r\n\r\nexport type FormMessagesDataType = {\r\n  message: string\r\n}\r\n\r\nexport type FormMessagesDataKeysType = keyof FormMessagesDataType\r\nexport const Dialogs: React.FC<PropsType> = ({ addMessageCB, dialogsData, messagesData }) => {\r\n\r\n  let onSubmit = (formData: FormMessagesDataType) => {\r\n    addMessageCB(formData.message);\r\n  };\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <DialogsItem dialogsData={dialogsData} />\r\n\r\n      <Messages messagesData={messagesData} />\r\n\r\n      <MessageReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React, { useCallback } from \"react\";\r\nimport { addMessage } from \"../../redux/dialogs-reducer\";\r\nimport { Dialogs } from \"./Dialogs\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\n\r\n\r\nexport default  () => {\r\n\r\n  /* ===useSelector=== */\r\n  const dialogsData = useSelector((state: AppStateType) => state.dialogsPage.dialogsData)\r\n  const messagesData = useSelector((state: AppStateType) => state.dialogsPage.messagesData)\r\n\r\n  /* ===useDispatch=== */\r\n\r\n  const dispatch = useDispatch()\r\n  const addMessageCB = useCallback((newMessageText: string) => {\r\n    dispatch(addMessage(newMessageText))\r\n  }, [dispatch])\r\n  return (\r\n    <Dialogs dialogsData={dialogsData} messagesData={messagesData} addMessageCB={addMessageCB}/>\r\n  )\r\n}\r\n"],"sourceRoot":""}
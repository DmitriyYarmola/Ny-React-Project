{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/untils/validators/validators.ts","components/form/profile-form/profile-form.tsx","components/editProfile/EditProfileContainer.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","Input","props","input","restProps","id","InputProps","visible","startAdornment","position","undefined","createField","validators","placeholder","type","name","label","validate","autoComplete","component","required","value","requiredMidle","maxLengthCreator","maxLength","length","minLengthCreator","minLength","maxLength30","ProfileReduxForm","reduxForm","form","handleSubmit","profile","console","log","contactsList","contactsArray","contacts","item","push","map","contact","key","onSubmit","Field","EditProfileContainer","profileMe","useSelector","state","profilePage","dispatch","useDispatch","saveProfileCB","useCallback","formData","saveProfile","initialValues","to"],"mappings":"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","file":"static/js/8.ce5ee1a6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ValidatorFieldType } from '../../untils/validators/validators';\r\nimport \"./FormsControls.sass\";\r\nimport { TextField, InputAdornment } from \"@material-ui/core\";\r\nimport { AccountCircle } from \"@material-ui/icons\";\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\n\r\n\r\n\r\nexport const FormControl:React.FC<WrappedFieldProps> = ({ meta, children }) => {\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={`form-control ${hasError ? \"error\" : \"\"}`}>\r\n      {children}\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type InputProps = {\r\n  visible: boolean\r\n}\r\n\r\nexport const Input:React.FC<WrappedFieldProps & InputProps>= (props) => {\r\n  const { input, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextField\r\n        className=\"field\"\r\n        id=\"input-with-icon-textfield\"\r\n        {...input}\r\n        {...restProps}\r\n        InputProps={restProps.visible ? {\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\" >\r\n              <AccountCircle />\r\n            </InputAdornment>\r\n          )\r\n        }: undefined}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n\r\nexport function createField<FormKeysType extends string>(\r\n   validators: ValidatorFieldType[], \r\n   className: string, \r\n   placeholder: string | undefined, \r\n   type: string | null, \r\n   name: FormKeysType  , \r\n   label: string | null,\r\n   visible: boolean) {\r\n  return (\r\n    <div>\r\n      <Field\r\n        validate={validators}\r\n        className={className} \r\n        autoComplete=\"off\"\r\n        placeholder={placeholder}\r\n        type={type}\r\n        name={name}\r\n        label={label}\r\n        component={Input}\r\n        visible={visible}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export type ValidatorFieldType = (value: string) => string | undefined\r\n\r\nexport const required: ValidatorFieldType = (value) => {\r\n  if (value) return undefined;\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const requiredMidle: ValidatorFieldType = value => {\r\n  if (!value) return ''\r\n  return undefined\r\n}\r\nexport const maxLengthCreator = (maxLength: number): ValidatorFieldType => {\r\n  return (value) => {\r\n    if (value && value.length > maxLength) return `Max Length ${maxLength} symbols`;\r\n    return undefined;\r\n  };\r\n};\r\n\r\nexport const minLengthCreator = (minLength: number): ValidatorFieldType => {\r\n  return (value) => {\r\n    if (value && value.length < minLength) return `Min Length ${minLength} symbols`;\r\n    return undefined;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { createField } from \"../../common/FormsControls/FormsControls\";\r\nimport { Field, reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  minLengthCreator,\r\n} from \"../../untils/validators/validators\";\r\nimport { ProfileType } from \"../../../redux/types/profile\";\r\nimport { EditProfileFormDataType, ContactsProfileType } from \"../../editProfile/EditProfileContainer\";\r\nimport \"./profile-form.sass\"\r\nconst maxLength30 = maxLengthCreator(30);\r\nconst minLength = minLengthCreator(1);\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\n\r\nconst ProfileForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n  console.log(profile)\r\n  let contactsArray = [];\r\n  let contactsList;\r\n  let { contacts } = profile;\r\n  for (let item in contacts) {\r\n    //@ts-ignore\r\n    if (contacts[item]) contactsArray.push(item);\r\n  }\r\n\r\n  contactsList = contactsArray.map((contact) => {\r\n    return (\r\n      <div key={contact} className={`profile-edit-form_contact-${contact}`} >\r\n        <b>{contact}:</b>\r\n        {createField<ContactsProfileType>(\r\n            [maxLength30, minLength],\r\n            `profile-edit-form_input-${contact}`,\r\n            `contacts.${contact}`,\r\n            \"text\",\r\n            //@ts-ignore\r\n            `contacts.${contact}`,\r\n            null,\r\n            false\r\n          )}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"profile-edit-form\">\r\n      <div className=\"profile-edit-form_content\">\r\n        <div className=\"profile-edit-form_nameUser\">\r\n          <b>Your Name:</b>\r\n          {createField<EditProfileFormDataType>(\r\n            [maxLength30, minLength],\r\n            \"profile-edit-form_input-userName\",\r\n            \"fullName\",\r\n            \"text\",\r\n            \"fullName\",\r\n            null,\r\n            false\r\n          )}\r\n        </div>\r\n        <b>About me: </b>\r\n        {createField<EditProfileFormDataType>(\r\n          [maxLength30, minLength],\r\n          \"profile-edit-form_input-about\",\r\n          \"aboutMe\",\r\n          \"text\",\r\n          \"aboutMe\",\r\n          null,\r\n          false\r\n        )}\r\n      </div>\r\n      <div className=\"profile-edit-form_lookingForJob\">\r\n        <b>looking Job:</b>\r\n        <Field\r\n          validate={[maxLength30, minLength]}\r\n          placeholder={undefined}\r\n          name=\"lookingForAJob\"\r\n          component=\"input\"\r\n          type=\"checkbox\"\r\n          className=\"profile-edit-form_input-lookingJob\"\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n      </div>\r\n      <div className=\"profile-edit-form_jobDescription\">\r\n        <b>Job Description:</b>\r\n        {createField<EditProfileFormDataType>(\r\n        [maxLength30, minLength],\r\n        \"profile-edit-form_input-jobDescription\",\r\n        \"lookingForAJobDescription\",\r\n        \"text\",\r\n        \"lookingForAJobDescription\",\r\n        null,\r\n        false\r\n      )}\r\n      </div>\r\n      <div className=\"profile-edit-form_contacts\">\r\n        <b>My contacts</b> {contactsList}\r\n      </div>\r\n      {error && <div className=\"form-summary_error\">{error}</div>}\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileReduxForm = reduxForm<ProfileType, PropsType>({\r\n  form: \"profileEdit\",\r\n})(ProfileForm);\r\n\r\nexport default ProfileReduxForm;\r\n","import React, { useCallback } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport ProfileFormRedux from \"../form/profile-form/profile-form\";\r\nimport { saveProfile } from '../../redux/profile-reducer'\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { ProfileType } from \"../../redux/types/profile\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { contactsType } from \"../../redux/types/contacts\";\r\n\r\n\r\nexport type EditProfileFormDataType = keyof ProfileType\r\nexport type ContactsProfileType = keyof contactsType\r\nconst EditProfileContainer: React.FC = (props) => {\r\n  /* ===UseSelector=== */\r\n  const profileMe = useSelector((state: AppStateType) => state.profilePage.profileMe)\r\n\r\n  /* ===UseDispatch=== */\r\n  const dispatch = useDispatch()\r\n  const saveProfileCB = useCallback((formData: ProfileType) => {\r\n    dispatch(saveProfile(formData))\r\n  }, [dispatch])\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfileCB(formData)\r\n  }\r\n\r\n  if (!profileMe) return <Redirect to=\"/profile\" />\r\n  return (\r\n    <ProfileFormRedux\r\n      {...props}\r\n      profile={profileMe}\r\n      initialValues={profileMe}\r\n      onSubmit={onSubmit}\r\n    />\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default EditProfileContainer\r\n"],"sourceRoot":""}